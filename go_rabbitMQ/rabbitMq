// rabbitMq 笔记
简单模式：单发单收
工作模式：一个队列有两个消费者。一个队列中一条消息，只能被一个消费者消费
以上交换机都是默认的direct
订阅与发布模式:Fanout
路由模式：Direct
主题模式：Topic



交换机类型
Fanout （订阅模式|广播模式）
生产者将消息扔给交换机，交换机类型是fanout
不处理路由键，只需要简单的将队里绑定到交换机上
生产者将消息不是直接发送到队列，而是发送到X交换机，发送到交换机的消息都会被转发到与该交换机绑定的所有队列上
Fanout交换机转发消息是最快的

例：有一个商城，我们新添加一个商品后，可能同时需要去更新缓存和数据库

Direct（路由模式）简单模式、
生产者将消息发送给交换机，消息携带具体的routingkey。交换机类型是direct，接收到消息中的routingkey，比对与之绑定的队列的routingkey，分发到不同的队列上
所有发送到Direct Exchange的消息被转发到RouteKey中指定的Queue。
消息传递时，RouteKey必须完全匹配才会被队列接收，否则该消息会被抛弃。
例：商城，新添加了一个商品，实时性不是很高，只需要添加到数据库即可，不用刷新缓存


Topic （通配符模式）（主题模式）
路由模式的一种，路由功能添加了模糊匹配。星号（*）代表1个单词，#号（#）代表一个或多个单词。具体可参考路由模式
所有发送到Topic Exchange的消息被转发到所有管线RouteKey中指定Topic的Queue上
Exchange将RouteKey和某Topic进行模糊匹配,此时队列需要绑定一个Topic

有一个商城，新添加了一个商品，实时性不是很高，只需要添加到数据库即可，数据库包含了主数据库mysql1和从数据库mysql2的内容，不用刷新缓存

Headers（键值对模式）
headers 也是根据规则匹配, 相较于 direct 和 topic 固定地使用 routing_key , headers 则是一个自定义匹配规则的类型.
在队列与交换器绑定时, 会设定一组键值对规则, 消息中也包括一组键值对( headers 属性), 当这些键值对有一对, 或全部匹配时, 消息被投送到对应队列.

简单模式：生产者，一个消费者，一个队列
工作模式：生产者，多个消费者，一个队列
订阅与发布模式(fanout)：生产者，一个交换机(fanoutExchange)，没有路由规则，多个消费者，多个队列
路由模式(direct)：生产者，一个交换机(directExchange)，路由规则，多个消费者，多个队列
主题模式(topic)：生产者，一个交换机(topicExchange)，模糊匹配路由规则，多个消费者，多个队列

RabbitMQ中实现RPC的机制是：
一. 生产者发送请求（消息）时，在消息的属性（MessageProperties，在AMQP协议中定义了14个属性，这些属性会随着消息一起发送）中设置两个属性值replyTo（一个Queue名称，用于告诉消费者处理完成后将通知我的消息发送到这个Queue中）和correlationId（此次请求的标识号，消费者处理完成后需要将此属性返还，生产者将根据这个id了解哪条请求被成功执行了或执行失败）。
二. 消费者收到消息并处理。
三. 消费者处理完消息后，将生成一条应答消息到replyTo指定的Queue，同时带上correlationId属性。
四. 生产者之前已订阅replyTo指定的Queue，从中收到服务器的应答消息后，根据其中的correlationId属性分析哪条请求被执行了，根据执行结果进行后续业务处理。