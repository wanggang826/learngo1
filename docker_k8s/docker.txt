// docker
// 容器和虚拟机的对比
相同：
容器和虚拟机一样都对物理硬件资源进行共享
容器和虚拟机生命周期相似 ：创建 运行 暂停 关闭等
都可以安装各种应用 redis  nginx 等
创建后都会存储在宿主机上
不同点：
虚拟机是一个完整的操作系统，容器需要操作系统做支撑的，本质上是一系列进程的组合
容器不需要额外的资源来管理，虚拟机有额外的更多性能消耗
容器创建启动等都容易的多



docker 是什么
一个开源的容器引擎，基于LCK容器技术，使用golang语言开发
docker 可轻松为任何应用创建可轻量级的、可移植的、自给自足的容器

docker提供了在一个完全隔离的环境中打包和运行应用程序的能力，这个隔离的环境成为容器
由于容器的隔离性和安全性，因此可以在一个主机（也叫住宿）上同时运行多个相互隔离的容器，互不干扰。

为什么用docker
保证程序运行环境的一致性
降低配置开发环境和生产环境复杂度和成本
实现程序的快速部署和分发
还可以避免甩锅

CS 结构 client (终端命令行)  通过REST API 与serve端进行通信的接口  sever 守护进程等待客户端发送命令 执行

四大核心技术：
镜像、容器、数据卷、网络
终端命令发送到 docker-host主机（docker服务端） 执行命令：如（docker pull）拉取镜像
镜像：一个docker的可执行文件，它包含运行程序所需的所有代码、依赖库、环境变量和配置文件等
容器：镜像被运行起来的实例
数据卷：容器和宿主机之间、容器和容器之间共享存储方式，类似于虚拟机和主机之间的共享文件目录  (容器内数据直接映射到本地主机环境)
网络：外部或容器之间互相访问的网络方式，如HOST模式，bridge模式

数据卷容器
docker create -v 容器卷目录 --name name1 image_id
docker run -it --name name2  -volumes-from name1 image_id 两个容器共享数据卷


docker 数据备份
创建一个挂载数据卷容器的容器
挂载宿主机本地目录作为备份数据卷
将数据卷容器的内容备份到宿主机本地目录挂载的数据卷中
完成备份操作后销毁刚创建的容器
docker run  --rm --volumes-from name1[数据卷容器name/ID]  -v /home/backup[宿主机目录] :/backup[容器目录]  image[镜像名称]  后面是备份命令 tar -zcPF /backup/data.tar.gz  /data



网络模式
bridge 同一主机下的容器都在一个网络下，彼此之间可以通过。利用宿主机网卡通信，因为涉及到网络转换所以会造成资源消耗，网络效率低
映射
桥接网络

host 容器与宿主机共享网络
none 最纯粹，可自由定制网络
container模式  使用以创建的容器网络 类似局域网  容器和容器共享网络
overlay  容器彼此不在同一网络，而且可以互相通行 （docker内部）


实际选那种模式好一些













